@using BlazorApp1.Client.Services
@using BlazorApp1.Shared.Models
@using BlazorApp1.Client.Pages.Components
@using BlazorApp1.Client.Pages.Components.Modals
@inject IAppStateService Appstate
@inject NavigationManager navmanager
@page "/tagpage"

<PageTitle>Tags</PageTitle>
<style>
    .tag_page {
        display: flex;
        flex-direction: column;
        align-items: center;
        width: 100%;
        height: 100%;
        overflow: hidden;
        color: black;
    }

    .tag_container {
        display: flex;
        align-items: center;
        justify-content: center;
    }

    .tag_content {
        display: flex;
        flex-direction: row;
        margin-top: 2em;
        width: 70%;
        flex-wrap: wrap;
    }

    .tag_item_list {
        display: flex;
        margin-top: 2em;
        width: 70%;
        flex-direction: column;
        overflow-y: scroll;
    }

    .tag {
        display: flex;
        justify-content: space-between;
        align-items: center;
        margin-left: 2em;
        margin-top: 1em;
        background-color: #0A0E22;
        color: white;
        border: 1px solid black;
        border-radius: 1em;
        min-width: 12em;
        height:4em;
    }

        .tag:hover {
            border: 1px solid white;
            cursor: pointer;
        }

    .tag_title{
        margin-left:1em;
    }

    .tag_control {
        display: flex;
        align-items: center;
        justify-content: center;
        margin-top: 2em;
    }

        .tag_control:hover {
            cursor: pointer;
            color: white;
        }
    .tag_delete{
        color:grey;
        margin-right:1em;

    }
    .tag_delete:hover{
        color:white;
    }
</style>

<div class="tag_page">
    @if (AddTagShow)
    {
        <AddTagModal2 toggleModal="ShowAddTag"></AddTagModal2>
    }
    <div class="tag_container">
        <div class="tag_control">
            <svg @onclick="()=>{ShowAddTag();}" xmlns="http://www.w3.org/2000/svg" width="30" height="30" fill="currentColor" class="bi bi-plus-circle addFolderButton" viewBox="0 0 16 16">
                <path d="M8 15A7 7 0 1 1 8 1a7 7 0 0 1 0 14zm0 1A8 8 0 1 0 8 0a8 8 0 0 0 0 16z" />
                <path d="M8 4a.5.5 0 0 1 .5.5v3h3a.5.5 0 0 1 0 1h-3v3a.5.5 0 0 1-1 0v-3h-3a.5.5 0 0 1 0-1h3v-3A.5.5 0 0 1 8 4z" />
            </svg>
        </div>
        <div class="tag_content">

            <div class="tag" @onclick="()=>{showAllItems();}">
                    <div class="tag_title">Show All</div>
            </div>
            @foreach (var tag in ItemTags)
            {
                <div class="tag" @onclick="()=>{filterTag(tag);}">
                    <div class="tag_title">
                         @tag.Name
                    </div>
                   
                    <svg @onclick="()=>{Appstate.DeleteTag(tag); StateHasChanged();}" xmlns="http://www.w3.org/2000/svg" width="16" height="16" fill="currentColor" 
                     class="bi bi-x-circle tag_delete" viewBox="0 0 16 16">
                        <path d="M8 15A7 7 0 1 1 8 1a7 7 0 0 1 0 14zm0 1A8 8 0 1 0 8 0a8 8 0 0 0 0 16z" />
                        <path d="M4.646 4.646a.5.5 0 0 1 .708 0L8 7.293l2.646-2.647a.5.5 0 0 1 .708.708L8.707 8l2.647 2.646a.5.5 0 0 1-.708.708L8 8.707l-2.646 2.647a.5.5 0 0 1-.708-.708L7.293 8 4.646 5.354a.5.5 0 0 1 0-.708z" />
                    </svg>

                </div>
            }
        </div>
    </div>

    <div class="tag_item_list">
        @foreach (var item in Items)
        {
            <div @onclick="()=>{GoToItem(item);}">
                <Item_List_Component Item="item"></Item_List_Component>
            </div>
        }
    </div>
</div>


@code {
    List<ItemTag> ItemTags = new List<ItemTag>();
    List<Item> AllItems = new List<Item>();
    List<Item> Items = new List<Item>();
    private bool AddTagShow { get; set; } = false;

    protected override async Task OnInitializedAsync()
    {
        await Appstate.GetAllItems();
        ItemTags = await Appstate.GetAllTags();
        AllItems = Appstate.AllItems;
        Items = AllItems;
    }

    private void filterTag(ItemTag tag)
    {
        List<Item> newItems = new List<Item>();
        for (var i = 0; i < AllItems.Count; i++)
        {
            var tags = AllItems[i].Tags;
            foreach (var thing in tags)
            {
                if (thing.Name == tag.Name)
                {
                    newItems.Add(AllItems[i]);
                }
            }
        }
        Items = newItems;
        StateHasChanged();
    }
    private void showAllItems()
    {
        Items = AllItems;
        StateHasChanged();
    }

    private void GoToItem(Item item)
    {
        Appstate.SetActiveItem(item, "");
        navmanager.NavigateTo("/itemlist/");
    }

    private async void ShowAddTag()
    {
        AddTagShow = !AddTagShow;
        ItemTags = await Appstate.GetAllTags();
        StateHasChanged();
    }
}
